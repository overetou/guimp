Roadmap:
1. Vérifier que lorsque libgui est modifiée, guimp est également relinké automatiquement.
2. Pas de fuite mémoire.
3. un fichier auteur.

Fonctions autorisées:
-open
-read
-write
-close
-malloc
-free
-perror
-strerror
-exit
-toutes les fonctions de la lib math (man 3 math)
-SDL2, SDL_ttf, SDL_image
-printf
-D'autres choses, mais uniquement pour les bonus.

Requis de pouvoir:
-Créer plusieurs fenêtres (pouvoir spécifier une couleur/image de fond)
-Proposer différents types de fenêtres: générique à élément, modale OK, modale OK/CANCEL.
	Elements de fenêtre générique:
	-bouton
	-menu
	-texte
	-image
	-texte éditable (ligne et zone)
	-checkbox
	-radio
	-slider
	-liste déroulante
	-barre de progression
	-ect... ??
-Chacun des éléments ont des paramètres (de style et de fonctionnalité). En gros on donne
	du code tout fait à l'utilisateur qu'il pourra appliquer aux différents éléments.
	Ex: spécifier la police et la couleur pour du texte, la taille, ect...
-Placer des éléments dans des éléments qui s'y prètent: un menu dans un menu, image dans
	un bouton, ect. Plusieurs cascade différentes doivent être présentées.
-Utiliser des fonctions pour cacher / révéler les éléments d'interface.
-Gérer les clicks, le focus, les touches. Pourvoir des callbacks par défaut (par exemple
	incrémentation ou décrémentation d'un compteur) et pouvoir spécifier des callbacks
	customs.
-Mettre en évidence que l'on gére correctement les évènements dans des éléments imbriqués.
-Des raccourcis clavier par défaut pour chaque éléments (lorsque cela a un sens.)
	Ex: Dans un texte éditable, ctrl-x pour couper le texte et le mettre dans le
	presse papier.
-Scrollabilité des éléments lorsque cela est sensé. L'utilisateur peut activer ou
	désactiver cette propriété sur un élément.
-Créer des préfabs: des combinaisons toutes prêtes d’éléments composés pour des
	utilisations courantes, comme par ex une barre d’état avec images et infos,
	ou encore un menu par défaut avec open/save/quit etc..
-Préfabs requis:
	-séléction de fichier.
	-choix de police de charactère
-Drag and drop, au moins pour les fenêtres
-Si toutes ces fonctionalités ne sont pas utilisées pour guimp, faire une démo
supplémentaire qui prouve leur existence et leur bon fonctionement.


Bonus:
-Security mode: Un define qui, lorsqu'il est activé, vérifie que tout ce qui est
demandé à l'ui est cohérent.
-Element d'interface supplémentaires:
	-books (plusieurs onglets qui modifient le contenu d'une sous page)
	-notifications (semblables à celle de vscode)
	-popup (comme ce qu'on a dans jetbrain quand on arrête le curseur sur un mot dans le code.)
-Ctrl-z

Dessin de base, côté utilisateur:
On a une structure ui, qui sera la première chose donnée à l'utilisateur.
A partir de cette ui, il peut créer des fenêtres. Celle ci seront aisément accessibles à partir d'un tableau dans ui qui aura une contenance max de 10. La fonction de création de fenêtre renverra
	également le pointeur de l'objet fenêtre crée.
Aucune abstraction pour commencer. Les préfabs demandés seront le plus minimaliste possible. Si l'utilisateur souhaite travailler de façon générique, il devra avoir recours à un framework externe
ou à une extension.
	Ex de workflow: créer un menu.
	-L'utilisateur crée manuellement tous les bouttons qu'il souhaite y mettre (en définissant leur apparence, leur callback et leur zones de sensibilité.
	-Il crée un menu (en définissant ses éléments d'apparence propre)
	-Il ajoute chaque bouton dans le menu avec la fonction prévue à cet effet.

Pour ce qui est du fonctionnement interne de la librairie: Il est essentiel que la librairie sache quoi dessiner lorsque on lui demande un refresh:
-les fenêtres sont considérées comme l'élément d'interface racine. Elles contiennent toute leur interface, affichée ou pas, sensible ou pas.
	On peut y ajouter autant d'éléments d'interface que l'on veut. Notons que certains éléments ont une liste limitée de types de contenu acceptés, comme les différents boutons.
-Lorsque l'on ajoute un élément d'interface quelque part, il faut préciser sa position et sa surface relatives à l'élément qui les contient. Ces paramètres peuvent être modifiés
	à tout moment.
-Un changement d'état des propriétés de base d'un élément affecte tout ceux qu'il contient (sans modifier leur valeur). (ex: si on passe la visibilité d'un menu à off, il deviendra
	invisible, ainsi que tous les boutons qu'il contient. En revanche, si on le remet en visible, les boutons qui étaient en on se réaffichent et ceux en off reste invisibles.)
-chaque élément contient également un int qui définie sa priorité d'affichage. Une priorité de 0 signifie que l'on est pas visible. Une priorité de 1 signifie que l'élément s'affichera par
	dessus tous les autres qui sont en collision avec lui. Tous les éléments visibles doivent avoir une priorité unique.
-Chaque élément contiendra une image. (sous forme de surface ou autre je sais pas encore) ou sera transparent. (image à NULL)
-la librairie affiche tous les sous éléments par dessus l'image de l'élément qui les contient, en fonction de leur priorité.
-on créera des fonctions pour faciliter la création de surfaces courantes (icone plus intitulé, ect...)
-Les boutons peuvent compter une ou plusieurs zones de sensibilité, pour pouvoir s'adapter à des formes saugrenues.
-chaque élémenent contient un indicateur de focus qui indique si au moins un de ses sous éléments sont sensibles au survol, et un pointeur sur fonction qui se déclenche lors de son survol (il
peut être NULL, auquel cas il ne sera pas déclenché.) Pareil pour les clics.

Appels de la librairie:
ui			*ui_init(initialisation params)
ui_window	*ui_add_window(ui*, win params, renderer params)
void		ui_add_elem(elem*, sub_elem*)
void		ui_remove_elem(elem*, sub_elem) //removes the elem from the ui list, and ideally free the elem as well.
surf		*ui_new_img_surf(img*)
surf		*ui_new_color_surf(img*)
surf		*ui_img_new_text_surf(text, text_color*, font, size[if not comprised in font], background_color*)
button		*ui_new_button(surf*, sensible area, callback, callback_param*)
surf		*ui_new_iconised_text(surf *icon, surf *text, surf *background) //Pas sur que ce soit pratique, Autant direct faire une fonction pour créer un boutton de ce type.
slider		*ui_new_slider(step, max_val, min_val, button *selector, button *slider_track)
menu		*ui_new_menu(surf *img) //il faudra remplir ce menu manuellement par la suite.
prog_bar	*ui_new_progress_bar(surf *background)
void		*update_progress_bar(prog_bar*, new_foreground*)
void		ui_set_hotkey(uint32 FLAG, callback, void *param) //the shortcuts will be stored in a chained list (with their flags, callback, param).
char		*run_file_selection(uint32 flags, other needed params)
void		v_scroll_by_n_percents(elem*, scroll_val)
void		ui_upload_last_action(ui*, ui_action*) //This will delete all the next actions.
void		ui_undo_last_action(ui*)
void		ui_redo_next_action(ui*)
char		*ui_get_paperpress_content(void)
void		ui_set_paperpress_content(text*)
et ainsi de suite pour tous les éléments d'interface.

button

Notes:
-Tous les éléments (bouttons, menus, fenêtre, ect...) auront dans leur structure une structure link qui servira à les manipuler au niveau de l'application et contiendra tous les éléments de
logiques partagés par les éléments.

Réalisation:

CORE:

OK-fonction ui_add_elem qui prend en paramêtre tous les paramêtre assignables pour l'utilisateur.
OK-fonction ui_resolve_and_refresh_win qui opère sur tous les éléments affichables avant de faire un render.
OK-Fonction de peinture d'élément.
OK-tester de créer une fenêtre, la peindre, placer un élément et le peindre aussi. Puis résoudre et afficher.
OK-Afficher du texte dans un elem et créer des fonctions faciles à manipuler pour gérer tout ça.
OK-Ne plus utiliser de SDL_Delay et gérer la fermeture de la fenêtre avec des moyens normaux.
OK-Mettre en place le système de sensibilité aux clics
OK-fonction refresh_win qui rafraichit intelligement la fenêtre aux seuls endroits qui seront
	modifiés. Il suffit d'appeller la fonction display de l'élément addoc et de ses subs
	une fois que la modification est finie.
-Remplacer la fonction remove_link par une autre qui est spécialisée dans la surpression
	du premier élément de la liste dans les fonctions de nettoyage massif.
-Rajouter une fonction: ui_modify_elem_appearance qui change la fonction display de l'elem et
	appelle ui_display_elem dessus. Plus d'autres choses si nécessaire.
-Ajouter le support d'une free_store_func dans win->content au cas ou l'utilisateur veuille
	utiliser le store de content. Sinon la mémoire leakera au moment ui_free_window supprimera
	'content'.
-Revoir le systeme de passage d'evenement de clic: les elements les plus visibles doivent repondre a la
	sensibilite en premier.
	IMPORTANT:
-Systeme de HOTKEYS
-Gerer la colision des elements lorsque la fenêtre se fait redimensionner. (pour les 
elements qui contiennent des choses a taille fixe) (ou alors faire du scrollable lorsqu'il
n'y a plus assez de place.)
-Ne raffraichir les proportions d'un element que si ce dernier est visible (disp_priority
 > 0)

BLOCKING:

OK-Creer une fonction de boutton
-Ajouter dans display une fonction qui permet de créer un cercle plein à partir d'une couleur
	et d'un référentiel de taille.
OK-bouton radio
OK-bouton checkbox
OK-Slider
OK-Texte éditable en ligne
-texte éditable en zone.
-barre de scroll (c'est un bonus)
-menu par defaut "open save quit"
-prefab selection de fichier
-prefab choix des polices de caractere disponibles
-Gerer les fenetres multiples
-L'utilisateur doit pouvoir choisir si les fenêtres sont redimensionnables.
-On doit pouvoir specifier une couleur de fond et/ou une image de fond.
-Creer des modeles de fenetres "modal ok" et "modal ok/cancel"
-Faire des listes deroulantes
-Faire des barres de progression

DISPLAY:

-Fonction d'affichage de texte, si nécessaire avec retour à la ligne.(fonctionnement le plus simple possible
pour commencer.)
-Fonction d'affichage d'image à partir d'un nom de fichier.
-Système de scroll (pour du texte pour commencer, mais peut-être le rendre générique pour que ça marche aussi avec des images.)

SEMI_BONUS:
-utiliser ui_text_to_texture a l'interieur de ui_create_simple_button.
-Creer des fonctions qui modidifient les membres de structure optionnellement modifiables
	(au lieu que l'utilisateur les modifie directement et casse potentiellement un mecanisme).
-Eventuellement Faire une fonction: ui_display_img_to_target. Qui permet de préciser le x, le y,
	le w et le h rapport à l'élément.
-Créer 1 liste de fonctions d'event handling cruciale. Ces fonctions seront executées à chaque event. Possiblement les séparer par types d'event par soucis d'opti mais on en est pas encore là. Les autres fonctions d'event handling seront dites mascables et ignorées ou gardées selon la fonction qui passera par dessus. A voir si on laissera à l'utilisateur la tâche de gérer les fonctions d'event handling par lui même.
-Remplacer le delay dans la boucle des events par un cronometre qui n'attends que le reste a attendre pour que l'on rafraichisse a interval regulier.
-Faire gerer l'ajout de masc permafunc et de crucial funcs par la librairie. (le code dans ui_slider_clicked)
-Raffraichir l'écran uniquement lorsque nécessaire en créant une liste d'objets à raffraichir sur le second buffer.

REFLEXIONS:
text zone est assez semblable a text line. Les differences sont:
-Au lieu d'avoir une seule ligne, on peut en avoir plusieurs.
-Lorsqu'une ligne depasse de l'espace disponible on revient a la ligne sans inserer de <cr>
-lorsque <cr> est presse on revient a la ligne en inserant un <cr>
-On va devoir faire le scroll vertical (faire quelque chose qui marche pour tout les
elements)
-Les flèches verticales permettent de naviguer d'une ligne a l'autre.

On a un probleme: les coordonnees de scroll space vont se transmettre a son enfant.
On voudrait qu'il se mette a 0 sur le x et le y de base. De plus si un element a des
dimensions donnees en proportionnel, on est eu (les mauvaises seront retransmises).
Solution:

Solution:
On utilise 2 couches. Ce sera plus simples comme ca.
Lorsque l'on souhaite redimensionner un element, on modifie simplement ses dimensions de
l'interieur. La fonction de resolution des dimensions de la couche superieure drainera
les dimensions de l'enfant de la couche inferieure pour la redimensionner.
L'utilisateur ne sera jamais sense interagir directement avec la couche inferieure.
On stockera le fils de la couche inferieure comme premier fils de la couche superieure?
Ou on utilisera simplement une fonction faite expres?
Pour la resolution des clics, on mettra une click func sur la couche superieure qui
transmettra la recherche tout en l'adaptant pour tenir compte du positionement du
scroll_space dans l'espace virtuel.

Il faut voir que l'element fils pourra definir ses dimensions w et h.

LA SUITE:
-Faire les flèches pour text_line.
 -C'est mort le code est trop complique. Il faut une architecture plus simple et
 	clairement delimitee.

Pour le scroll, on va juste afficher ce que l'on peut afficher. Etape 1: on cree un
	element intitule "scrolable", dont la seule fonction sera de rendre SON(et pas ses)
	enfant scrollable.
	-L'enfant de scroll aura une disp priority nulle. Il sera donc ignore par	ui_display_elem.
	-la fonction de display de scroll se chargera d'afficher son contenu.
	-Ne pas oublier de definir une couleur par defaut dans la texture (dans display.)
-Pour la liste deroulante, on mettra un texte avec l'intitule, puis un espace en dessous
(qui apparait lorsque l'on clique sur l'intitule) ou on mettra un choix radio.
